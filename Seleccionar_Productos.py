# Form implementation generated from reading ui file 'Consultar_inventario.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
from clases.Productos import Productos

class Ui_SelectProducts(object):

    def setupUi(self, SelectProducts, MainWindow):
        SelectProducts.setObjectName("SelectProducts")
        SelectProducts.resize(1261, 532)        # Resolucion ventana
        SelectProducts.setMinimumSize(1261, 532)
        SelectProducts.setMaximumSize(1261, 532)
        SelectProducts.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(61, 61, 61, 255));")
        self.centralwidget = QtWidgets.QWidget(parent=SelectProducts)
        self.centralwidget.setObjectName("centralwidget")
        self.background = QtWidgets.QLabel(parent=self.centralwidget)
        self.background.setGeometry(QtCore.QRect(10, 0, 1241, 511))
        self.background.setText("")
        self.background.setPixmap(QtGui.QPixmap("images/caja_screen.png"))
        self.background.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.background.setObjectName("background")

        self.btnVolver = QtWidgets.QPushButton(parent=self.centralwidget, clicked=lambda: self.cerrarVentana(MainWindow, SelectProducts))
        self.btnVolver.setGeometry(QtCore.QRect(1120, 90, 100, 32))
        self.btnVolver.setStyleSheet("QPushButton{\n"
                                     "   background-color: rgb(80, 80, 80);\n"
                                     "   color: rgb(175, 175, 175);\n"
                                     "   border-radius: 10px;\n"
                                     "   border: 1px solid;\n"
                                     "}\n"
                                     "QPushButton::hover{\n"
                                     "   background-color: rgb(100, 100, 100);\n"
                                     "   color: rgb(225, 225, 225);\n"
                                     "   border: 1px solid rgb(100, 100, 100);\n"
                                     "}\n"
                                     "QPushButton::pressed{\n"
                                     "   background-color: rgb(230, 29, 82);\n"
                                     "   color: rgb(255, 255, 255);\n"
                                     "   border: 0px;\n"
                                     "}")
        self.btnVolver.setObjectName("btnVolver")

        self.scrollArea = QtWidgets.QScrollArea(parent=self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(50, 140, 730, 352))
        self.scrollArea.setStyleSheet("background-color: rgb(225,225,225);\n" "border-radius: 0px;")
        self.scrollArea.setObjectName("scrollArea")

        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 713, 478))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        
        # Se crea un panel grid para cargar los productos del archivo csv y mostrarlos en este mismo
        self.panelGrid = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.panelGrid.setHorizontalSpacing(20)
        self.panelGrid.setVerticalSpacing(20)
        
        self.listaCarrito = QtWidgets.QScrollArea(self.centralwidget)
        self.listaCarrito.setGeometry(QtCore.QRect(815, 140, 385, 352))
        self.listaCarrito.setWidgetResizable(True)
        self.listaCarrito.setObjectName("listaCarrito")
        self.listaCarrito.setStyleSheet("background-color: rgb(225,225,225);\n" "border-radius: 0px;")

        self.scrollAreaCarritoWidgetContents = QtWidgets.QWidget()
        self.scrollAreaCarritoWidgetContents.setGeometry(QtCore.QRect(0, 0, 400, 352))
        self.scrollAreaCarritoWidgetContents.setObjectName("scrollAreaCarritoWidgetContents")
        self.listaCarrito.setWidget(self.scrollAreaCarritoWidgetContents)

        self.VBoxCarrito = QtWidgets.QVBoxLayout(self.scrollAreaCarritoWidgetContents)
        self.VBoxCarrito.setSpacing(0)

        # Carga la lista de productos del archivo CSV
        lista_productos = Productos.cargar_productos_CSV()

        # Arreglo para guardar datos del carrito
        self.carrito = {}

        # Se inicializan las filas y columnas para organizar los productos en el panel grid
        fila = 0
        columna = 0

        # Se cargan todos los productos y se añaden a la interfaz
        for producto in lista_productos:
            # Carga la imagen respecto al nombre del producto
            nombreProducto = producto.get_nombre()
            rutaImagen = "productos/" + nombreProducto + ".jpg"
            imagenProducto = QtGui.QPixmap(rutaImagen)
            
            # Si no hay imagen carga una por defecto
            if imagenProducto.isNull():
                imagenProducto = QtGui.QPixmap("productos/No_Imagen.jpg") 
                imagenProducto = imagenProducto.scaled(100, 100, QtCore.Qt.AspectRatioMode.KeepAspectRatio)

            # Cambia el tamaño de la imagen y lo hace de 100x100 manteniendo el aspect ratio
            imagenProducto = imagenProducto.scaled(100, 100, QtCore.Qt.AspectRatioMode.KeepAspectRatio)

            # Crea un label para la imagen del producto
            labelImagen = QtWidgets.QLabel()
            labelImagen.setPixmap(imagenProducto)
            labelImagen.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)

            # Crea un label para el nombre del producto
            labelProducto = QtWidgets.QLabel(nombreProducto)
            labelProducto.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
            labelProducto.setStyleSheet("color: rgb(10,10,10);")

            # Crea un label para la cantidad del producto
            cantidad = producto.get_cantidad()
            labelCantidad = QtWidgets.QLabel("Cantidad: " + cantidad)
            labelCantidad.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
            labelCantidad.setStyleSheet("color: rgb(10,10,10);")
            
            # Crea un label para la precio del producto
            precio = producto.get_precio()
            labelPrecio = QtWidgets.QLabel("Precio: $" + str(precio))
            labelPrecio.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
            labelPrecio.setStyleSheet("color: rgb(10,10,10);")
            
            # Botón para agregar producto al carrito
            btnAgregar = QtWidgets.QPushButton("Agregar al carrito")
            btnAgregar.setStyleSheet(self.btn_style_sheet())
            btnAgregar.clicked.connect(lambda _, nombre=nombreProducto, precio=precio: self.agregarAlCarrito(nombre, precio))

            # Se crea una verticalbox para organizar los productos por imagen, nombre, cantidad, precio y btnAgregar en vertical
            VBoxProducto = QtWidgets.QVBoxLayout()
            VBoxProducto.setSpacing(0)
            VBoxProducto.addWidget(labelImagen)
            VBoxProducto.addWidget(labelProducto)
            VBoxProducto.addWidget(labelCantidad)
            VBoxProducto.addWidget(labelPrecio)
            VBoxProducto.addWidget(btnAgregar)
            
            # Se añade el verticalbox y el botón al panel grid
            self.panelGrid.addLayout(VBoxProducto, fila, columna)

            # Avanza una columna por cada producto, al pasar los 2 productos, salta de línea
            columna += 1
            if columna >= 4:
                columna = 0
                fila += 1

        # Se hace que el panel grid sea scrolleable
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.actualizarCarrito()

        SelectProducts.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=SelectProducts)
        self.statusbar.setObjectName("statusbar")
        SelectProducts.setStatusBar(self.statusbar)

        self.retranslateUi(SelectProducts)
        QtCore.QMetaObject.connectSlotsByName(SelectProducts)

    def retranslateUi(self, SelectProducts):
        _translate = QtCore.QCoreApplication.translate
        SelectProducts.setWindowTitle(_translate("SelectProducts", "Seleccionar Productos"))
        self.btnVolver.setText(_translate("SelectProducts", "Volver"))

    def cerrarVentana(self, main_w, consul_w):
        main_w.show()
        consul_w.close()
        
    def aumentarCantidad(self, nombreProducto):
        if nombreProducto in self.carrito:
            self.carrito[nombreProducto]['cantidad'] += 1
            self.actualizarCarrito()

    def disminuirCantidad(self, nombreProducto):
        if nombreProducto in self.carrito:
            if self.carrito[nombreProducto]['cantidad'] > 1:
                self.carrito[nombreProducto]['cantidad'] -= 1
            else:
                # Si el carrito tiene cantidad 0 se borra el producto de la lista
                del self.carrito[nombreProducto]
            self.actualizarCarrito()

    def agregarAlCarrito(self, nombreProducto, precio_producto):
        if nombreProducto in self.carrito:
            self.carrito[nombreProducto]['cantidad'] += 1
        else:
            self.carrito[nombreProducto] = {'precio': precio_producto, 'cantidad': 1}
        self.actualizarCarrito()
        
    def actualizarCarrito(self):
        # Vacia la lista de carrito
        while self.VBoxCarrito.count() > 0:
            productoItem = self.VBoxCarrito.takeAt(0)
            if productoItem is not None:
                productoWidget = productoItem.widget()
                if productoWidget is not None:
                    self.VBoxCarrito.removeWidget(productoWidget)
                    productoWidget.setParent(None)


        # Llena la lista del carrito con los productos que fueron seleccionados
        for nombreProductoCarrito, listadeproductos in self.carrito.items():            
            # Se crea una HBox para almacenar los datos e imagen del productos y mostrarlos ordenadamente
            HBoxScroll = QtWidgets.QWidget()
            HBoxProducto = QtWidgets.QHBoxLayout(HBoxScroll)

            # Carga la imagen respecto al nombre del producto
            rutaImagen = "productos/" + nombreProductoCarrito + ".jpg"
            imagenProducto = QtGui.QPixmap(rutaImagen)  
            # Si no hay imagen carga una por defecto
            if imagenProducto.isNull():
                imagenProducto = QtGui.QPixmap("productos/No_Imagen.jpg")
                imagenProducto = imagenProducto.scaled(65, 65, QtCore.Qt.AspectRatioMode.KeepAspectRatio)
                
            # Cambia el tamaño de la imagen y lo hace de 65x65 manteniendo el aspect ratio
            imagenProducto = imagenProducto.scaled(65, 65, QtCore.Qt.AspectRatioMode.KeepAspectRatio)
            # Crea un label para la imagen del producto
            labelImagen = QtWidgets.QLabel()
            labelImagen.setPixmap(imagenProducto)
            labelImagen.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)

            cantidad = listadeproductos['cantidad']
            precio = cantidad * int(listadeproductos['precio'])
            datosProducto = QtWidgets.QLabel(nombreProductoCarrito + '\nCantidad: ' + str(cantidad) + '\nPrecio total: $' + str(precio))
            datosProducto.setAlignment(QtCore.Qt.AlignmentFlag.AlignVCenter)
            datosProducto.setStyleSheet("color: rgb(10,10,10);")

            btnMenos = QtWidgets.QPushButton("-")
            btnMenos.setFixedSize(30, 30)
            btnMenos.setStyleSheet(self.btn_style_sheet())
            btnMenos.clicked.connect(lambda _, nombre=nombreProductoCarrito: self.disminuirCantidad(nombre))

            btnMas = QtWidgets.QPushButton("+")
            btnMas.setFixedSize(30, 30)
            btnMas.setStyleSheet(self.btn_style_sheet())
            btnMas.clicked.connect(lambda _, nombre=nombreProductoCarrito: self.aumentarCantidad(nombre))

            # Se añaden los datos al HBox
            HBoxProducto.addWidget(labelImagen)
            HBoxProducto.addWidget(datosProducto)
            HBoxProducto.addWidget(btnMenos)
            HBoxProducto.addWidget(btnMas)

            self.VBoxCarrito.addWidget(HBoxScroll)
    

            
    def btn_style_sheet(self):
        return ("QPushButton{\n"
                "   font: 600 12pt \"Segoe UI Semibold\";\n"
                "   background-color: rgb(80, 80, 80);\n"
                "   color: rgb(175, 175, 175);\n"
                "   border-radius: 10px;\n"
                "   border: 1px solid;\n"
                "}\n"
                "QPushButton::hover{\n"
                "   background-color: rgb(100, 100, 100);\n"
                "   color: rgb(225, 225, 225);\n"
                "   border: 1px solid rgb(100, 100, 100);\n"
                "}\n"
                "QPushButton::pressed{\n"
                "   background-color: rgb(230, 29, 82);\n"
                "   color: rgb(255, 255, 255);\n"
                "   border: 0px;\n"
                "}")
